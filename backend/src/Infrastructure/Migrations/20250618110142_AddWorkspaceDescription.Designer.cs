// <auto-generated />
using System;
using Infrastructure.Database;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Infrastructure.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250618110142_AddWorkspaceDescription")]
    partial class AddWorkspaceDescription
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Domain.Workspaces.Booking", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid?>("DeskId")
                        .HasColumnType("uuid")
                        .HasColumnName("desk_id");

                    b.Property<DateTime>("EndTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("end_time");

                    b.Property<Guid?>("RoomId")
                        .HasColumnType("uuid")
                        .HasColumnName("room_id");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("start_time");

                    b.Property<string>("UserEmail")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)")
                        .HasColumnName("user_email");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)")
                        .HasColumnName("user_name");

                    b.Property<Guid>("WorkspaceId")
                        .HasColumnType("uuid")
                        .HasColumnName("workspace_id");

                    b.HasKey("Id")
                        .HasName("pk_bookings");

                    b.HasIndex("DeskId")
                        .IsUnique()
                        .HasDatabaseName("ix_bookings_desk_id");

                    b.HasIndex("RoomId")
                        .IsUnique()
                        .HasDatabaseName("ix_bookings_room_id");

                    b.HasIndex("WorkspaceId")
                        .IsUnique()
                        .HasDatabaseName("ix_bookings_workspace_id");

                    b.ToTable("bookings", (string)null);
                });

            modelBuilder.Entity("Domain.Workspaces.Desk", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid>("WorkspaceId")
                        .HasColumnType("uuid")
                        .HasColumnName("workspace_id");

                    b.HasKey("Id")
                        .HasName("pk_desks");

                    b.HasIndex("WorkspaceId")
                        .HasDatabaseName("ix_desks_workspace_id");

                    b.ToTable("desks", (string)null);
                });

            modelBuilder.Entity("Domain.Workspaces.Room", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<int>("Capacity")
                        .HasColumnType("integer")
                        .HasColumnName("capacity");

                    b.Property<Guid>("WorkspaceId")
                        .HasColumnType("uuid")
                        .HasColumnName("workspace_id");

                    b.HasKey("Id")
                        .HasName("pk_rooms");

                    b.HasIndex("WorkspaceId")
                        .HasDatabaseName("ix_rooms_workspace_id");

                    b.ToTable("rooms", (string)null);
                });

            modelBuilder.Entity("Domain.Workspaces.Workspace", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(512)
                        .HasColumnType("character varying(512)")
                        .HasColumnName("description");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("pk_workspaces");

                    b.ToTable("workspaces", (string)null);
                });

            modelBuilder.Entity("Domain.Workspaces.Booking", b =>
                {
                    b.HasOne("Domain.Workspaces.Desk", "Desk")
                        .WithOne()
                        .HasForeignKey("Domain.Workspaces.Booking", "DeskId")
                        .HasConstraintName("fk_bookings_desks_desk_id");

                    b.HasOne("Domain.Workspaces.Room", "Room")
                        .WithOne()
                        .HasForeignKey("Domain.Workspaces.Booking", "RoomId")
                        .HasConstraintName("fk_bookings_rooms_room_id");

                    b.HasOne("Domain.Workspaces.Workspace", "Workspace")
                        .WithOne()
                        .HasForeignKey("Domain.Workspaces.Booking", "WorkspaceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_bookings_workspaces_workspace_id");

                    b.Navigation("Desk");

                    b.Navigation("Room");

                    b.Navigation("Workspace");
                });

            modelBuilder.Entity("Domain.Workspaces.Desk", b =>
                {
                    b.HasOne("Domain.Workspaces.Workspace", "Workspace")
                        .WithMany("Desks")
                        .HasForeignKey("WorkspaceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_desks_workspaces_workspace_id");

                    b.Navigation("Workspace");
                });

            modelBuilder.Entity("Domain.Workspaces.Room", b =>
                {
                    b.HasOne("Domain.Workspaces.Workspace", "Workspace")
                        .WithMany("Rooms")
                        .HasForeignKey("WorkspaceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_rooms_workspaces_workspace_id");

                    b.Navigation("Workspace");
                });

            modelBuilder.Entity("Domain.Workspaces.Workspace", b =>
                {
                    b.Navigation("Desks");

                    b.Navigation("Rooms");
                });
#pragma warning restore 612, 618
        }
    }
}
